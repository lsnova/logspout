input {
    udp {
        port => 5000
        codec => json
    }
}

filter {

    if [docker][image] =~ /logspout/ {
        drop { }
    }

    grok {
        match          => ["docker", "name"]
        tag_on_failure => [ "_no_docker" ]
    }

    if "_no_docker" in [tags] {
        drop { }
    }

# nazwa pliku / raw message
    mutate {
        add_field => {
            "[@metadata][filename]"=> "%{[docker][name]}.%{[docker][id]}"
            "[@metadata][raw]"=> "%{message}"
        }
    }

    grok {
        match => {
            "[docker][image]" => "(?<image_name>[^:]+):.+"
        }
    }

    grok {
        match => {
            "message" => "\[trace:(?<trace_id>[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12})\]\s+%{LOGLEVEL:level}\s+(?<logger>[a-zA-Z\.]+)\s+-\s+%{GREEDYDATA:message}"
        }
        overwrite => [ "message" ]
     }

    json {
        source => "message"
        target => "message_json"
    }

    if "_jsonparsefailure" not in [tags] {
        mutate {
            add_field => {
                "logbook_type" => "%{[message_json][type]}"
            }
        }
    }

    mutate {
#        remove_tag => [ "_jsonparsefailure" ]
        remove_field => [ "message_json" ]
    }
}

output {

# jak chcemy debug caÅ‚ego komunikatu
#    stdout {
#        codec => rubydebug {
#             metadata => true
#        }
#    }

    elasticsearch {
        hosts => elasticsearch
    }

    file {
        path => '/tmp/logs/%{[@metadata][filename]}-%{+YYYY-MM-dd}.log'
        codec => line {
            format => "%{[@metadata][raw]}"
        }
    }
}
